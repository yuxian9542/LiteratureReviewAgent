Metadata-Version: 2.1
Name: literature-review-agent
Version: 1.0.0
Summary: AI-powered academic paper analysis and summarization tool
Home-page: 
Author: Literature Review Agent
Author-email: 
Keywords: academic research literature review AI analysis PDF
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is a Literature Review Agent designed for academic paper analysis and summarization. The project is built in Python and provides a comprehensive CLI tool for processing PDF documents, extracting text content, and performing AI-powered literature analysis.

## Setup and Dependencies

The project uses pip for dependency management. Install dependencies with:
```bash
pip install -r requirements.txt
```

Key dependencies include:
- pdfplumber for PDF text extraction
- click for CLI interface
- validators for input validation
- openai for AI analysis capabilities
- langchain for text processing and chunking
- requests for URL handling
- pydantic for configuration management
- python-dotenv for environment variable management

## Configuration

1. Copy the example environment file:
```bash
cp .env.example .env
```

2. Add your OpenAI API key to the `.env` file:
```
OPENAI_API_KEY=your_api_key_here
```

## Running the Application

The main entry point is `main.py` which provides a comprehensive CLI interface:

### Basic Usage

```bash
# Extract text from a local PDF file
python main.py -i path/to/document.pdf

# Extract text and save to file
python main.py -i path/to/document.pdf -o extracted_text.txt

# Process a PDF from URL
python main.py -i https://example.com/paper.pdf

# Show help
python main.py --help
```

### AI-Powered Analysis

```bash
# Perform full AI analysis (requires OpenAI API key)
python main.py -i document.pdf --analyze

# Analyze and save results in different formats
python main.py -i document.pdf --analyze -f markdown -o analysis.md
python main.py -i document.pdf --analyze -f json -o analysis.json

# Enable verbose logging
python main.py -i document.pdf --analyze -v
```

### Command Options

- `-i, --input`: PDF file path or URL (required)
- `-o, --output`: Output file for results
- `-f, --format`: Output format (text, markdown, json) - default: text
- `--analyze`: Perform AI-powered analysis (requires OpenAI API key)
- `-v, --verbose`: Enable verbose logging

## Testing

The project has a `tests/` directory. To run tests:
```bash
python -m pytest tests/
```

## Architecture

The codebase follows a modular architecture with clear separation of concerns:

### Core Components

- **`main.py`**: CLI entry point with comprehensive option handling
- **`config/`**: Configuration management with environment variable support
  - Handles OpenAI API key and analysis parameters
- **`input_handlers/`**: Input validation and processing
  - `InputValidator`: Validates file paths and URLs, downloads PDFs from URLs
- **`parsers/`**: Document parsing functionality
  - `PDFParser`: Extracts text and metadata from PDF files using pdfplumber
- **`agents/`**: AI-powered analysis components
  - `LiteratureReviewAgent`: Performs comprehensive paper analysis using OpenAI GPT
- **`summarizers/`**: Output formatting and presentation
  - `AnalysisFormatter`: Formats results in text, markdown, or JSON
- **`utils/`**: Utility functions for text processing and application support
  - Text cleaning, section extraction, progress tracking, logging setup

### Implementation Status

- ✅ PDF text extraction from local files and URLs
- ✅ Input validation with proper PDF verification
- ✅ URL processing with automatic PDF downloading
- ✅ AI-powered analysis with comprehensive paper breakdown
- ✅ Multiple output formats (text, markdown, JSON)
- ✅ Progress tracking and logging
- ✅ Error handling and cleanup

### AI Analysis Features

The AI agent provides comprehensive literature analysis:

1. **Summary Generation**: 3-4 paragraph summary of the paper
2. **Key Findings Extraction**: Bullet-pointed list of main discoveries
3. **Methodology Analysis**: Summary of research methods and approach
4. **Contribution Identification**: Main contributions and novel insights
5. **Limitations & Future Work**: Identified limitations and suggested improvements

### Data Flow

1. CLI receives input and options
2. `InputValidator` validates input and downloads URLs if needed
3. `PDFParser` extracts text and metadata from PDF
4. Text is cleaned and processed using utility functions
5. If `--analyze` flag is set:
   - `LiteratureReviewAgent` performs AI analysis
   - Results are formatted using `AnalysisFormatter`
6. Output is displayed or saved based on user options
7. Temporary files are cleaned up

## Development Notes

- The project validates PDF files by checking both file extension and PDF header
- URL downloads are handled with proper timeout and error handling
- AI analysis uses text chunking to handle large documents
- All components have proper error handling and logging
- Temporary files from URL downloads are automatically cleaned up
- The system supports both basic text extraction and advanced AI analysis modes
